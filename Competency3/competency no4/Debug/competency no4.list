
competency no4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000288c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002a24  08002a24  00012a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a3c  08002a3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002a3c  08002a3c  00012a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a44  08002a44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a44  08002a44  00012a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a48  08002a48  00012a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  2000000c  08002a58  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08002a58  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d14  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001777  00000000  00000000  00029d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  0002b4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  0002bc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d16  00000000  00000000  0002c3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000097a2  00000000  00000000  000420b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d777  00000000  00000000  0004b858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8fcf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001eb4  00000000  00000000  000d9020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002a0c 	.word	0x08002a0c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002a0c 	.word	0x08002a0c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fac2 	bl	8000a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f80c 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f8f2 	bl	80006d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f8c6 	bl	800067c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004f0:	f000 f870 	bl	80005d4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  ADCConfigTnit();
 80004f4:	f000 f95a 	bl	80007ac <ADCConfigTnit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ADCTem();
 80004f8:	f000 f96c 	bl	80007d4 <ADCTem>
 80004fc:	e7fc      	b.n	80004f8 <main+0x1c>
	...

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	; 0x50
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	2230      	movs	r2, #48	; 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f002 fa74 	bl	80029fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	4b28      	ldr	r3, [pc, #160]	; (80005cc <SystemClock_Config+0xcc>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	4a27      	ldr	r2, [pc, #156]	; (80005cc <SystemClock_Config+0xcc>)
 800052e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000532:	6413      	str	r3, [r2, #64]	; 0x40
 8000534:	4b25      	ldr	r3, [pc, #148]	; (80005cc <SystemClock_Config+0xcc>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b22      	ldr	r3, [pc, #136]	; (80005d0 <SystemClock_Config+0xd0>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a21      	ldr	r2, [pc, #132]	; (80005d0 <SystemClock_Config+0xd0>)
 800054a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <SystemClock_Config+0xd0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055c:	2302      	movs	r3, #2
 800055e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000560:	2301      	movs	r3, #1
 8000562:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000564:	2310      	movs	r3, #16
 8000566:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000568:	2302      	movs	r3, #2
 800056a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056c:	2300      	movs	r3, #0
 800056e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000570:	2310      	movs	r3, #16
 8000572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000574:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000578:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800057a:	2304      	movs	r3, #4
 800057c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800057e:	2304      	movs	r3, #4
 8000580:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	4618      	mov	r0, r3
 8000588:	f001 faba 	bl	8001b00 <HAL_RCC_OscConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000592:	f000 f95b 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	230f      	movs	r3, #15
 8000598:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	2302      	movs	r3, #2
 800059c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2102      	movs	r1, #2
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 fd1c 	bl	8001ff0 <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005be:	f000 f945 	bl	800084c <Error_Handler>
  }
}
 80005c2:	bf00      	nop
 80005c4:	3750      	adds	r7, #80	; 0x50
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40007000 	.word	0x40007000

080005d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005da:	463b      	mov	r3, r7
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005e6:	4b21      	ldr	r3, [pc, #132]	; (800066c <MX_ADC1_Init+0x98>)
 80005e8:	4a21      	ldr	r2, [pc, #132]	; (8000670 <MX_ADC1_Init+0x9c>)
 80005ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005ec:	4b1f      	ldr	r3, [pc, #124]	; (800066c <MX_ADC1_Init+0x98>)
 80005ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005f4:	4b1d      	ldr	r3, [pc, #116]	; (800066c <MX_ADC1_Init+0x98>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005fa:	4b1c      	ldr	r3, [pc, #112]	; (800066c <MX_ADC1_Init+0x98>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000600:	4b1a      	ldr	r3, [pc, #104]	; (800066c <MX_ADC1_Init+0x98>)
 8000602:	2200      	movs	r2, #0
 8000604:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000606:	4b19      	ldr	r3, [pc, #100]	; (800066c <MX_ADC1_Init+0x98>)
 8000608:	2200      	movs	r2, #0
 800060a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800060e:	4b17      	ldr	r3, [pc, #92]	; (800066c <MX_ADC1_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000614:	4b15      	ldr	r3, [pc, #84]	; (800066c <MX_ADC1_Init+0x98>)
 8000616:	4a17      	ldr	r2, [pc, #92]	; (8000674 <MX_ADC1_Init+0xa0>)
 8000618:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800061a:	4b14      	ldr	r3, [pc, #80]	; (800066c <MX_ADC1_Init+0x98>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_ADC1_Init+0x98>)
 8000622:	2201      	movs	r2, #1
 8000624:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_ADC1_Init+0x98>)
 8000628:	2200      	movs	r2, #0
 800062a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_ADC1_Init+0x98>)
 8000630:	2201      	movs	r2, #1
 8000632:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000634:	480d      	ldr	r0, [pc, #52]	; (800066c <MX_ADC1_Init+0x98>)
 8000636:	f000 fa89 	bl	8000b4c <HAL_ADC_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000640:	f000 f904 	bl	800084c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_ADC1_Init+0xa4>)
 8000646:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000648:	2301      	movs	r3, #1
 800064a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000650:	463b      	mov	r3, r7
 8000652:	4619      	mov	r1, r3
 8000654:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_ADC1_Init+0x98>)
 8000656:	f000 fd6b 	bl	8001130 <HAL_ADC_ConfigChannel>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000660:	f000 f8f4 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000028 	.word	0x20000028
 8000670:	40012000 	.word	0x40012000
 8000674:	0f000001 	.word	0x0f000001
 8000678:	10000012 	.word	0x10000012

0800067c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 8000682:	4a12      	ldr	r2, [pc, #72]	; (80006cc <MX_USART2_UART_Init+0x50>)
 8000684:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 8000688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800068c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 80006b4:	f001 febc 	bl	8002430 <HAL_UART_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006be:	f000 f8c5 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000070 	.word	0x20000070
 80006cc:	40004400 	.word	0x40004400

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	4b2d      	ldr	r3, [pc, #180]	; (80007a0 <MX_GPIO_Init+0xd0>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a2c      	ldr	r2, [pc, #176]	; (80007a0 <MX_GPIO_Init+0xd0>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b2a      	ldr	r3, [pc, #168]	; (80007a0 <MX_GPIO_Init+0xd0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	4b26      	ldr	r3, [pc, #152]	; (80007a0 <MX_GPIO_Init+0xd0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a25      	ldr	r2, [pc, #148]	; (80007a0 <MX_GPIO_Init+0xd0>)
 800070c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <MX_GPIO_Init+0xd0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <MX_GPIO_Init+0xd0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a1e      	ldr	r2, [pc, #120]	; (80007a0 <MX_GPIO_Init+0xd0>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <MX_GPIO_Init+0xd0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <MX_GPIO_Init+0xd0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a17      	ldr	r2, [pc, #92]	; (80007a0 <MX_GPIO_Init+0xd0>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_GPIO_Init+0xd0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2120      	movs	r1, #32
 800075a:	4812      	ldr	r0, [pc, #72]	; (80007a4 <MX_GPIO_Init+0xd4>)
 800075c:	f001 f9b6 	bl	8001acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000760:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000766:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800076a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4619      	mov	r1, r3
 8000776:	480c      	ldr	r0, [pc, #48]	; (80007a8 <MX_GPIO_Init+0xd8>)
 8000778:	f001 f824 	bl	80017c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800077c:	2320      	movs	r3, #32
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	2301      	movs	r3, #1
 8000782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	4619      	mov	r1, r3
 8000792:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_GPIO_Init+0xd4>)
 8000794:	f001 f816 	bl	80017c4 <HAL_GPIO_Init>

}
 8000798:	bf00      	nop
 800079a:	3728      	adds	r7, #40	; 0x28
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40020000 	.word	0x40020000
 80007a8:	40020800 	.word	0x40020800

080007ac <ADCConfigTnit>:

/* USER CODE BEGIN 4 */

void ADCConfigTnit()
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
	ADCChannel.Config.Channel = ADC_CHANNEL_TEMPSENSOR;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <ADCConfigTnit+0x20>)
 80007b2:	4a07      	ldr	r2, [pc, #28]	; (80007d0 <ADCConfigTnit+0x24>)
 80007b4:	601a      	str	r2, [r3, #0]
	ADCChannel.Config.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007b6:	4b05      	ldr	r3, [pc, #20]	; (80007cc <ADCConfigTnit+0x20>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
	ADCChannel.Config.Rank = 1;
 80007bc:	4b03      	ldr	r3, [pc, #12]	; (80007cc <ADCConfigTnit+0x20>)
 80007be:	2201      	movs	r2, #1
 80007c0:	605a      	str	r2, [r3, #4]

}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	200000b4 	.word	0x200000b4
 80007d0:	10000012 	.word	0x10000012

080007d4 <ADCTem>:
void ADCTem()
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	  HAL_ADC_ConfigChannel(&hadc1, &ADCChannel.Config);
 80007d8:	4918      	ldr	r1, [pc, #96]	; (800083c <ADCTem+0x68>)
 80007da:	4819      	ldr	r0, [pc, #100]	; (8000840 <ADCTem+0x6c>)
 80007dc:	f000 fca8 	bl	8001130 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc1);
 80007e0:	4817      	ldr	r0, [pc, #92]	; (8000840 <ADCTem+0x6c>)
 80007e2:	f000 f9f7 	bl	8000bd4 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1, 1000)== HAL_OK)
 80007e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007ea:	4815      	ldr	r0, [pc, #84]	; (8000840 <ADCTem+0x6c>)
 80007ec:	f000 fad9 	bl	8000da2 <HAL_ADC_PollForConversion>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d11c      	bne.n	8000830 <ADCTem+0x5c>
	  {
	     temp = (ADCChannel.data = HAL_ADC_GetValue(&hadc1))*330/1023;
 80007f6:	4812      	ldr	r0, [pc, #72]	; (8000840 <ADCTem+0x6c>)
 80007f8:	f000 fc6e 	bl	80010d8 <HAL_ADC_GetValue>
 80007fc:	4603      	mov	r3, r0
 80007fe:	b29a      	uxth	r2, r3
 8000800:	4b0e      	ldr	r3, [pc, #56]	; (800083c <ADCTem+0x68>)
 8000802:	821a      	strh	r2, [r3, #16]
 8000804:	4b0d      	ldr	r3, [pc, #52]	; (800083c <ADCTem+0x68>)
 8000806:	8a1b      	ldrh	r3, [r3, #16]
 8000808:	461a      	mov	r2, r3
 800080a:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 800080e:	fb02 f303 	mul.w	r3, r2, r3
 8000812:	4a0c      	ldr	r2, [pc, #48]	; (8000844 <ADCTem+0x70>)
 8000814:	fb82 1203 	smull	r1, r2, r2, r3
 8000818:	441a      	add	r2, r3
 800081a:	1252      	asrs	r2, r2, #9
 800081c:	17db      	asrs	r3, r3, #31
 800081e:	1ad3      	subs	r3, r2, r3
 8000820:	ee07 3a90 	vmov	s15, r3
 8000824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <ADCTem+0x74>)
 800082a:	edc3 7a00 	vstr	s15, [r3]
	  }
	  else
	  HAL_ADC_Stop(&hadc1);

}
 800082e:	e002      	b.n	8000836 <ADCTem+0x62>
	  HAL_ADC_Stop(&hadc1);
 8000830:	4803      	ldr	r0, [pc, #12]	; (8000840 <ADCTem+0x6c>)
 8000832:	f000 fa83 	bl	8000d3c <HAL_ADC_Stop>
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200000b4 	.word	0x200000b4
 8000840:	20000028 	.word	0x20000028
 8000844:	80200803 	.word	0x80200803
 8000848:	200000c8 	.word	0x200000c8

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	e7fe      	b.n	8000854 <Error_Handler+0x8>
	...

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <HAL_MspInit+0x4c>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000866:	4a0f      	ldr	r2, [pc, #60]	; (80008a4 <HAL_MspInit+0x4c>)
 8000868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086c:	6453      	str	r3, [r2, #68]	; 0x44
 800086e:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <HAL_MspInit+0x4c>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <HAL_MspInit+0x4c>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	4a08      	ldr	r2, [pc, #32]	; (80008a4 <HAL_MspInit+0x4c>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000888:	6413      	str	r3, [r2, #64]	; 0x40
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <HAL_MspInit+0x4c>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000896:	2007      	movs	r0, #7
 8000898:	f000 ff52 	bl	8001740 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40023800 	.word	0x40023800

080008a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <HAL_ADC_MspInit+0x48>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d115      	bne.n	80008e6 <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <HAL_ADC_MspInit+0x4c>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	4a0c      	ldr	r2, [pc, #48]	; (80008f4 <HAL_ADC_MspInit+0x4c>)
 80008c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008c8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ca:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <HAL_ADC_MspInit+0x4c>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2100      	movs	r1, #0
 80008da:	2012      	movs	r0, #18
 80008dc:	f000 ff3b 	bl	8001756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80008e0:	2012      	movs	r0, #18
 80008e2:	f000 ff54 	bl	800178e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40012000 	.word	0x40012000
 80008f4:	40023800 	.word	0x40023800

080008f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	; 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a19      	ldr	r2, [pc, #100]	; (800097c <HAL_UART_MspInit+0x84>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d12b      	bne.n	8000972 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b18      	ldr	r3, [pc, #96]	; (8000980 <HAL_UART_MspInit+0x88>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	4a17      	ldr	r2, [pc, #92]	; (8000980 <HAL_UART_MspInit+0x88>)
 8000924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000928:	6413      	str	r3, [r2, #64]	; 0x40
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <HAL_UART_MspInit+0x88>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <HAL_UART_MspInit+0x88>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a10      	ldr	r2, [pc, #64]	; (8000980 <HAL_UART_MspInit+0x88>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <HAL_UART_MspInit+0x88>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000952:	230c      	movs	r3, #12
 8000954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095e:	2303      	movs	r3, #3
 8000960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000962:	2307      	movs	r3, #7
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	4805      	ldr	r0, [pc, #20]	; (8000984 <HAL_UART_MspInit+0x8c>)
 800096e:	f000 ff29 	bl	80017c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000972:	bf00      	nop
 8000974:	3728      	adds	r7, #40	; 0x28
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40004400 	.word	0x40004400
 8000980:	40023800 	.word	0x40023800
 8000984:	40020000 	.word	0x40020000

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800098c:	e7fe      	b.n	800098c <NMI_Handler+0x4>

0800098e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <HardFault_Handler+0x4>

08000994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <MemManage_Handler+0x4>

0800099a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <BusFault_Handler+0x4>

080009a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <UsageFault_Handler+0x4>

080009a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d4:	f000 f89a 	bl	8000b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <ADC_IRQHandler+0x10>)
 80009e2:	f000 fa69 	bl	8000eb8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000028 	.word	0x20000028

080009f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <SystemInit+0x20>)
 80009f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fa:	4a05      	ldr	r2, [pc, #20]	; (8000a10 <SystemInit+0x20>)
 80009fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a18:	480d      	ldr	r0, [pc, #52]	; (8000a50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a1a:	490e      	ldr	r1, [pc, #56]	; (8000a54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a1c:	4a0e      	ldr	r2, [pc, #56]	; (8000a58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a20:	e002      	b.n	8000a28 <LoopCopyDataInit>

08000a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a26:	3304      	adds	r3, #4

08000a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a2c:	d3f9      	bcc.n	8000a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2e:	4a0b      	ldr	r2, [pc, #44]	; (8000a5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a30:	4c0b      	ldr	r4, [pc, #44]	; (8000a60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a34:	e001      	b.n	8000a3a <LoopFillZerobss>

08000a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a38:	3204      	adds	r2, #4

08000a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a3c:	d3fb      	bcc.n	8000a36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a3e:	f7ff ffd7 	bl	80009f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a42:	f001 ffb7 	bl	80029b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a46:	f7ff fd49 	bl	80004dc <main>
  bx  lr    
 8000a4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a54:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a58:	08002a4c 	.word	0x08002a4c
  ldr r2, =_sbss
 8000a5c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a60:	200000d0 	.word	0x200000d0

08000a64 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a64:	e7fe      	b.n	8000a64 <DMA1_Stream0_IRQHandler>
	...

08000a68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <HAL_Init+0x40>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0d      	ldr	r2, [pc, #52]	; (8000aa8 <HAL_Init+0x40>)
 8000a72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a78:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <HAL_Init+0x40>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <HAL_Init+0x40>)
 8000a7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <HAL_Init+0x40>)
 8000a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a90:	2003      	movs	r0, #3
 8000a92:	f000 fe55 	bl	8001740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a96:	2000      	movs	r0, #0
 8000a98:	f000 f808 	bl	8000aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a9c:	f7ff fedc 	bl	8000858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023c00 	.word	0x40023c00

08000aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <HAL_InitTick+0x54>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <HAL_InitTick+0x58>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4619      	mov	r1, r3
 8000abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 fe6d 	bl	80017aa <HAL_SYSTICK_Config>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e00e      	b.n	8000af8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2b0f      	cmp	r3, #15
 8000ade:	d80a      	bhi.n	8000af6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	f000 fe35 	bl	8001756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aec:	4a06      	ldr	r2, [pc, #24]	; (8000b08 <HAL_InitTick+0x5c>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000af2:	2300      	movs	r3, #0
 8000af4:	e000      	b.n	8000af8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000000 	.word	0x20000000
 8000b04:	20000008 	.word	0x20000008
 8000b08:	20000004 	.word	0x20000004

08000b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_IncTick+0x20>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_IncTick+0x24>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <HAL_IncTick+0x24>)
 8000b1e:	6013      	str	r3, [r2, #0]
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	20000008 	.word	0x20000008
 8000b30:	200000cc 	.word	0x200000cc

08000b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return uwTick;
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <HAL_GetTick+0x14>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	200000cc 	.word	0x200000cc

08000b4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b54:	2300      	movs	r3, #0
 8000b56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d101      	bne.n	8000b62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e033      	b.n	8000bca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d109      	bne.n	8000b7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff fe9c 	bl	80008a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2200      	movs	r2, #0
 8000b74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f003 0310 	and.w	r3, r3, #16
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d118      	bne.n	8000bbc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b92:	f023 0302 	bic.w	r3, r3, #2
 8000b96:	f043 0202 	orr.w	r2, r3, #2
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f000 fbf8 	bl	8001394 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	f023 0303 	bic.w	r3, r3, #3
 8000bb2:	f043 0201 	orr.w	r2, r3, #1
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	641a      	str	r2, [r3, #64]	; 0x40
 8000bba:	e001      	b.n	8000bc0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d101      	bne.n	8000bee <HAL_ADC_Start+0x1a>
 8000bea:	2302      	movs	r3, #2
 8000bec:	e097      	b.n	8000d1e <HAL_ADC_Start+0x14a>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	f003 0301 	and.w	r3, r3, #1
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d018      	beq.n	8000c36 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	689a      	ldr	r2, [r3, #8]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f042 0201 	orr.w	r2, r2, #1
 8000c12:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c14:	4b45      	ldr	r3, [pc, #276]	; (8000d2c <HAL_ADC_Start+0x158>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a45      	ldr	r2, [pc, #276]	; (8000d30 <HAL_ADC_Start+0x15c>)
 8000c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1e:	0c9a      	lsrs	r2, r3, #18
 8000c20:	4613      	mov	r3, r2
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	4413      	add	r3, r2
 8000c26:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000c28:	e002      	b.n	8000c30 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d1f9      	bne.n	8000c2a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	f003 0301 	and.w	r3, r3, #1
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d15f      	bne.n	8000d04 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c48:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c4c:	f023 0301 	bic.w	r3, r3, #1
 8000c50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d007      	beq.n	8000c76 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c6e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c82:	d106      	bne.n	8000c92 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c88:	f023 0206 	bic.w	r2, r3, #6
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	645a      	str	r2, [r3, #68]	; 0x44
 8000c90:	e002      	b.n	8000c98 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2200      	movs	r2, #0
 8000c96:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ca0:	4b24      	ldr	r3, [pc, #144]	; (8000d34 <HAL_ADC_Start+0x160>)
 8000ca2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000cac:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f003 031f 	and.w	r3, r3, #31
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d10f      	bne.n	8000cda <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d129      	bne.n	8000d1c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	e020      	b.n	8000d1c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a16      	ldr	r2, [pc, #88]	; (8000d38 <HAL_ADC_Start+0x164>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d11b      	bne.n	8000d1c <HAL_ADC_Start+0x148>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d114      	bne.n	8000d1c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	689a      	ldr	r2, [r3, #8]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	e00b      	b.n	8000d1c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d08:	f043 0210 	orr.w	r2, r3, #16
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d14:	f043 0201 	orr.w	r2, r3, #1
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	431bde83 	.word	0x431bde83
 8000d34:	40012300 	.word	0x40012300
 8000d38:	40012000 	.word	0x40012000

08000d3c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d101      	bne.n	8000d52 <HAL_ADC_Stop+0x16>
 8000d4e:	2302      	movs	r3, #2
 8000d50:	e021      	b.n	8000d96 <HAL_ADC_Stop+0x5a>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2201      	movs	r2, #1
 8000d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	689a      	ldr	r2, [r3, #8]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f022 0201 	bic.w	r2, r2, #1
 8000d68:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d109      	bne.n	8000d8c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d80:	f023 0301 	bic.w	r3, r3, #1
 8000d84:	f043 0201 	orr.w	r2, r3, #1
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b084      	sub	sp, #16
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
 8000daa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dbe:	d113      	bne.n	8000de8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000dce:	d10b      	bne.n	8000de8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	f043 0220 	orr.w	r2, r3, #32
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	e063      	b.n	8000eb0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000de8:	f7ff fea4 	bl	8000b34 <HAL_GetTick>
 8000dec:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000dee:	e021      	b.n	8000e34 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df6:	d01d      	beq.n	8000e34 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d007      	beq.n	8000e0e <HAL_ADC_PollForConversion+0x6c>
 8000dfe:	f7ff fe99 	bl	8000b34 <HAL_GetTick>
 8000e02:	4602      	mov	r2, r0
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	683a      	ldr	r2, [r7, #0]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d212      	bcs.n	8000e34 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f003 0302 	and.w	r3, r3, #2
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d00b      	beq.n	8000e34 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e20:	f043 0204 	orr.w	r2, r3, #4
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000e30:	2303      	movs	r3, #3
 8000e32:	e03d      	b.n	8000eb0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d1d6      	bne.n	8000df0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f06f 0212 	mvn.w	r2, #18
 8000e4a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d123      	bne.n	8000eae <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d11f      	bne.n	8000eae <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e74:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d006      	beq.n	8000e8a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d111      	bne.n	8000eae <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d105      	bne.n	8000eae <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	f043 0201 	orr.w	r2, r3, #1
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	f003 0320 	and.w	r3, r3, #32
 8000ee6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d049      	beq.n	8000f82 <HAL_ADC_IRQHandler+0xca>
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d046      	beq.n	8000f82 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	f003 0310 	and.w	r3, r3, #16
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d105      	bne.n	8000f0c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d12b      	bne.n	8000f72 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d127      	bne.n	8000f72 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f28:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d006      	beq.n	8000f3e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d119      	bne.n	8000f72 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f022 0220 	bic.w	r2, r2, #32
 8000f4c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d105      	bne.n	8000f72 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	f043 0201 	orr.w	r2, r3, #1
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f000 f8bd 	bl	80010f2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f06f 0212 	mvn.w	r2, #18
 8000f80:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f003 0304 	and.w	r3, r3, #4
 8000f88:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f90:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d057      	beq.n	8001048 <HAL_ADC_IRQHandler+0x190>
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d054      	beq.n	8001048 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	f003 0310 	and.w	r3, r3, #16
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d105      	bne.n	8000fb6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d139      	bne.n	8001038 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d006      	beq.n	8000fe0 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d12b      	bne.n	8001038 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d124      	bne.n	8001038 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d11d      	bne.n	8001038 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001000:	2b00      	cmp	r3, #0
 8001002:	d119      	bne.n	8001038 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001012:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001028:	2b00      	cmp	r3, #0
 800102a:	d105      	bne.n	8001038 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	f043 0201 	orr.w	r2, r3, #1
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 faa7 	bl	800158c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f06f 020c 	mvn.w	r2, #12
 8001046:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001056:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d017      	beq.n	800108e <HAL_ADC_IRQHandler+0x1d6>
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d014      	beq.n	800108e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	2b01      	cmp	r3, #1
 8001070:	d10d      	bne.n	800108e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 f841 	bl	8001106 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f06f 0201 	mvn.w	r2, #1
 800108c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f003 0320 	and.w	r3, r3, #32
 8001094:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800109c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d015      	beq.n	80010d0 <HAL_ADC_IRQHandler+0x218>
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d012      	beq.n	80010d0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	f043 0202 	orr.w	r2, r3, #2
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f06f 0220 	mvn.w	r2, #32
 80010be:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 f82a 	bl	800111a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f06f 0220 	mvn.w	r2, #32
 80010ce:	601a      	str	r2, [r3, #0]
  }
}
 80010d0:	bf00      	nop
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001144:	2b01      	cmp	r3, #1
 8001146:	d101      	bne.n	800114c <HAL_ADC_ConfigChannel+0x1c>
 8001148:	2302      	movs	r3, #2
 800114a:	e113      	b.n	8001374 <HAL_ADC_ConfigChannel+0x244>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2201      	movs	r2, #1
 8001150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b09      	cmp	r3, #9
 800115a:	d925      	bls.n	80011a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	68d9      	ldr	r1, [r3, #12]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	b29b      	uxth	r3, r3
 8001168:	461a      	mov	r2, r3
 800116a:	4613      	mov	r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4413      	add	r3, r2
 8001170:	3b1e      	subs	r3, #30
 8001172:	2207      	movs	r2, #7
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43da      	mvns	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	400a      	ands	r2, r1
 8001180:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68d9      	ldr	r1, [r3, #12]
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	b29b      	uxth	r3, r3
 8001192:	4618      	mov	r0, r3
 8001194:	4603      	mov	r3, r0
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	4403      	add	r3, r0
 800119a:	3b1e      	subs	r3, #30
 800119c:	409a      	lsls	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	430a      	orrs	r2, r1
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	e022      	b.n	80011ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	6919      	ldr	r1, [r3, #16]
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	461a      	mov	r2, r3
 80011b6:	4613      	mov	r3, r2
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4413      	add	r3, r2
 80011bc:	2207      	movs	r2, #7
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43da      	mvns	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	400a      	ands	r2, r1
 80011ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6919      	ldr	r1, [r3, #16]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	689a      	ldr	r2, [r3, #8]
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	4618      	mov	r0, r3
 80011de:	4603      	mov	r3, r0
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	4403      	add	r3, r0
 80011e4:	409a      	lsls	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	430a      	orrs	r2, r1
 80011ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b06      	cmp	r3, #6
 80011f4:	d824      	bhi.n	8001240 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	4613      	mov	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	3b05      	subs	r3, #5
 8001208:	221f      	movs	r2, #31
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43da      	mvns	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	400a      	ands	r2, r1
 8001216:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	b29b      	uxth	r3, r3
 8001224:	4618      	mov	r0, r3
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	4613      	mov	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	3b05      	subs	r3, #5
 8001232:	fa00 f203 	lsl.w	r2, r0, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	430a      	orrs	r2, r1
 800123c:	635a      	str	r2, [r3, #52]	; 0x34
 800123e:	e04c      	b.n	80012da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b0c      	cmp	r3, #12
 8001246:	d824      	bhi.n	8001292 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	3b23      	subs	r3, #35	; 0x23
 800125a:	221f      	movs	r2, #31
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43da      	mvns	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	400a      	ands	r2, r1
 8001268:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	b29b      	uxth	r3, r3
 8001276:	4618      	mov	r0, r3
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	3b23      	subs	r3, #35	; 0x23
 8001284:	fa00 f203 	lsl.w	r2, r0, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	430a      	orrs	r2, r1
 800128e:	631a      	str	r2, [r3, #48]	; 0x30
 8001290:	e023      	b.n	80012da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	4613      	mov	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	3b41      	subs	r3, #65	; 0x41
 80012a4:	221f      	movs	r2, #31
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43da      	mvns	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	400a      	ands	r2, r1
 80012b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4618      	mov	r0, r3
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	4613      	mov	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	3b41      	subs	r3, #65	; 0x41
 80012ce:	fa00 f203 	lsl.w	r2, r0, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	430a      	orrs	r2, r1
 80012d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012da:	4b29      	ldr	r3, [pc, #164]	; (8001380 <HAL_ADC_ConfigChannel+0x250>)
 80012dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a28      	ldr	r2, [pc, #160]	; (8001384 <HAL_ADC_ConfigChannel+0x254>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d10f      	bne.n	8001308 <HAL_ADC_ConfigChannel+0x1d8>
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b12      	cmp	r3, #18
 80012ee:	d10b      	bne.n	8001308 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a1d      	ldr	r2, [pc, #116]	; (8001384 <HAL_ADC_ConfigChannel+0x254>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d12b      	bne.n	800136a <HAL_ADC_ConfigChannel+0x23a>
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a1c      	ldr	r2, [pc, #112]	; (8001388 <HAL_ADC_ConfigChannel+0x258>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d003      	beq.n	8001324 <HAL_ADC_ConfigChannel+0x1f4>
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b11      	cmp	r3, #17
 8001322:	d122      	bne.n	800136a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a11      	ldr	r2, [pc, #68]	; (8001388 <HAL_ADC_ConfigChannel+0x258>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d111      	bne.n	800136a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <HAL_ADC_ConfigChannel+0x25c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a11      	ldr	r2, [pc, #68]	; (8001390 <HAL_ADC_ConfigChannel+0x260>)
 800134c:	fba2 2303 	umull	r2, r3, r2, r3
 8001350:	0c9a      	lsrs	r2, r3, #18
 8001352:	4613      	mov	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800135c:	e002      	b.n	8001364 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	3b01      	subs	r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f9      	bne.n	800135e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	40012300 	.word	0x40012300
 8001384:	40012000 	.word	0x40012000
 8001388:	10000012 	.word	0x10000012
 800138c:	20000000 	.word	0x20000000
 8001390:	431bde83 	.word	0x431bde83

08001394 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800139c:	4b79      	ldr	r3, [pc, #484]	; (8001584 <ADC_Init+0x1f0>)
 800139e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	431a      	orrs	r2, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6859      	ldr	r1, [r3, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	021a      	lsls	r2, r3, #8
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	430a      	orrs	r2, r1
 80013dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80013ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6859      	ldr	r1, [r3, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	430a      	orrs	r2, r1
 80013fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800140e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6899      	ldr	r1, [r3, #8]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68da      	ldr	r2, [r3, #12]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	430a      	orrs	r2, r1
 8001420:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001426:	4a58      	ldr	r2, [pc, #352]	; (8001588 <ADC_Init+0x1f4>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d022      	beq.n	8001472 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800143a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6899      	ldr	r1, [r3, #8]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	430a      	orrs	r2, r1
 800144c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800145c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6899      	ldr	r1, [r3, #8]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	e00f      	b.n	8001492 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001480:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001490:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 0202 	bic.w	r2, r2, #2
 80014a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6899      	ldr	r1, [r3, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	7e1b      	ldrb	r3, [r3, #24]
 80014ac:	005a      	lsls	r2, r3, #1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d01b      	beq.n	80014f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80014de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6859      	ldr	r1, [r3, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ea:	3b01      	subs	r3, #1
 80014ec:	035a      	lsls	r2, r3, #13
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	e007      	b.n	8001508 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001506:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001516:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	3b01      	subs	r3, #1
 8001524:	051a      	lsls	r2, r3, #20
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800153c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6899      	ldr	r1, [r3, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800154a:	025a      	lsls	r2, r3, #9
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	430a      	orrs	r2, r1
 8001552:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001562:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6899      	ldr	r1, [r3, #8]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	029a      	lsls	r2, r3, #10
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	430a      	orrs	r2, r1
 8001576:	609a      	str	r2, [r3, #8]
}
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	40012300 	.word	0x40012300
 8001588:	0f000001 	.word	0x0f000001

0800158c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015bc:	4013      	ands	r3, r2
 80015be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d2:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	60d3      	str	r3, [r2, #12]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <__NVIC_GetPriorityGrouping+0x18>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	0a1b      	lsrs	r3, r3, #8
 80015f2:	f003 0307 	and.w	r3, r3, #7
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	2b00      	cmp	r3, #0
 8001614:	db0b      	blt.n	800162e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	f003 021f 	and.w	r2, r3, #31
 800161c:	4907      	ldr	r1, [pc, #28]	; (800163c <__NVIC_EnableIRQ+0x38>)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	095b      	lsrs	r3, r3, #5
 8001624:	2001      	movs	r0, #1
 8001626:	fa00 f202 	lsl.w	r2, r0, r2
 800162a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000e100 	.word	0xe000e100

08001640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	db0a      	blt.n	800166a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	b2da      	uxtb	r2, r3
 8001658:	490c      	ldr	r1, [pc, #48]	; (800168c <__NVIC_SetPriority+0x4c>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	0112      	lsls	r2, r2, #4
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	440b      	add	r3, r1
 8001664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001668:	e00a      	b.n	8001680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4908      	ldr	r1, [pc, #32]	; (8001690 <__NVIC_SetPriority+0x50>)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	3b04      	subs	r3, #4
 8001678:	0112      	lsls	r2, r2, #4
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	440b      	add	r3, r1
 800167e:	761a      	strb	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000e100 	.word	0xe000e100
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001694:	b480      	push	{r7}
 8001696:	b089      	sub	sp, #36	; 0x24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f1c3 0307 	rsb	r3, r3, #7
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	bf28      	it	cs
 80016b2:	2304      	movcs	r3, #4
 80016b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3304      	adds	r3, #4
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	d902      	bls.n	80016c4 <NVIC_EncodePriority+0x30>
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3b03      	subs	r3, #3
 80016c2:	e000      	b.n	80016c6 <NVIC_EncodePriority+0x32>
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	f04f 32ff 	mov.w	r2, #4294967295
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43da      	mvns	r2, r3
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	401a      	ands	r2, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016dc:	f04f 31ff 	mov.w	r1, #4294967295
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	43d9      	mvns	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	4313      	orrs	r3, r2
         );
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3724      	adds	r7, #36	; 0x24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800170c:	d301      	bcc.n	8001712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800170e:	2301      	movs	r3, #1
 8001710:	e00f      	b.n	8001732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <SysTick_Config+0x40>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3b01      	subs	r3, #1
 8001718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171a:	210f      	movs	r1, #15
 800171c:	f04f 30ff 	mov.w	r0, #4294967295
 8001720:	f7ff ff8e 	bl	8001640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <SysTick_Config+0x40>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172a:	4b04      	ldr	r3, [pc, #16]	; (800173c <SysTick_Config+0x40>)
 800172c:	2207      	movs	r2, #7
 800172e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	e000e010 	.word	0xe000e010

08001740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ff29 	bl	80015a0 <__NVIC_SetPriorityGrouping>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	4603      	mov	r3, r0
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001768:	f7ff ff3e 	bl	80015e8 <__NVIC_GetPriorityGrouping>
 800176c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	68b9      	ldr	r1, [r7, #8]
 8001772:	6978      	ldr	r0, [r7, #20]
 8001774:	f7ff ff8e 	bl	8001694 <NVIC_EncodePriority>
 8001778:	4602      	mov	r2, r0
 800177a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff5d 	bl	8001640 <__NVIC_SetPriority>
}
 8001786:	bf00      	nop
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff31 	bl	8001604 <__NVIC_EnableIRQ>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff ffa2 	bl	80016fc <SysTick_Config>
 80017b8:	4603      	mov	r3, r0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	; 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
 80017de:	e159      	b.n	8001a94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017e0:	2201      	movs	r2, #1
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	f040 8148 	bne.w	8001a8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	2b01      	cmp	r3, #1
 8001808:	d005      	beq.n	8001816 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001812:	2b02      	cmp	r3, #2
 8001814:	d130      	bne.n	8001878 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	2203      	movs	r2, #3
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	68da      	ldr	r2, [r3, #12]
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4313      	orrs	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800184c:	2201      	movs	r2, #1
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	091b      	lsrs	r3, r3, #4
 8001862:	f003 0201 	and.w	r2, r3, #1
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	2b03      	cmp	r3, #3
 8001882:	d017      	beq.n	80018b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	2203      	movs	r2, #3
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d123      	bne.n	8001908 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	08da      	lsrs	r2, r3, #3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3208      	adds	r2, #8
 80018c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	220f      	movs	r2, #15
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	691a      	ldr	r2, [r3, #16]
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	08da      	lsrs	r2, r3, #3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3208      	adds	r2, #8
 8001902:	69b9      	ldr	r1, [r7, #24]
 8001904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	2203      	movs	r2, #3
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 0203 	and.w	r2, r3, #3
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 80a2 	beq.w	8001a8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	4b57      	ldr	r3, [pc, #348]	; (8001aac <HAL_GPIO_Init+0x2e8>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	4a56      	ldr	r2, [pc, #344]	; (8001aac <HAL_GPIO_Init+0x2e8>)
 8001954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001958:	6453      	str	r3, [r2, #68]	; 0x44
 800195a:	4b54      	ldr	r3, [pc, #336]	; (8001aac <HAL_GPIO_Init+0x2e8>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001966:	4a52      	ldr	r2, [pc, #328]	; (8001ab0 <HAL_GPIO_Init+0x2ec>)
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	089b      	lsrs	r3, r3, #2
 800196c:	3302      	adds	r3, #2
 800196e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001972:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	220f      	movs	r2, #15
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a49      	ldr	r2, [pc, #292]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d019      	beq.n	80019c6 <HAL_GPIO_Init+0x202>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a48      	ldr	r2, [pc, #288]	; (8001ab8 <HAL_GPIO_Init+0x2f4>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d013      	beq.n	80019c2 <HAL_GPIO_Init+0x1fe>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a47      	ldr	r2, [pc, #284]	; (8001abc <HAL_GPIO_Init+0x2f8>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d00d      	beq.n	80019be <HAL_GPIO_Init+0x1fa>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a46      	ldr	r2, [pc, #280]	; (8001ac0 <HAL_GPIO_Init+0x2fc>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d007      	beq.n	80019ba <HAL_GPIO_Init+0x1f6>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a45      	ldr	r2, [pc, #276]	; (8001ac4 <HAL_GPIO_Init+0x300>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d101      	bne.n	80019b6 <HAL_GPIO_Init+0x1f2>
 80019b2:	2304      	movs	r3, #4
 80019b4:	e008      	b.n	80019c8 <HAL_GPIO_Init+0x204>
 80019b6:	2307      	movs	r3, #7
 80019b8:	e006      	b.n	80019c8 <HAL_GPIO_Init+0x204>
 80019ba:	2303      	movs	r3, #3
 80019bc:	e004      	b.n	80019c8 <HAL_GPIO_Init+0x204>
 80019be:	2302      	movs	r3, #2
 80019c0:	e002      	b.n	80019c8 <HAL_GPIO_Init+0x204>
 80019c2:	2301      	movs	r3, #1
 80019c4:	e000      	b.n	80019c8 <HAL_GPIO_Init+0x204>
 80019c6:	2300      	movs	r3, #0
 80019c8:	69fa      	ldr	r2, [r7, #28]
 80019ca:	f002 0203 	and.w	r2, r2, #3
 80019ce:	0092      	lsls	r2, r2, #2
 80019d0:	4093      	lsls	r3, r2
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019d8:	4935      	ldr	r1, [pc, #212]	; (8001ab0 <HAL_GPIO_Init+0x2ec>)
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	089b      	lsrs	r3, r3, #2
 80019de:	3302      	adds	r3, #2
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019e6:	4b38      	ldr	r3, [pc, #224]	; (8001ac8 <HAL_GPIO_Init+0x304>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	43db      	mvns	r3, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4013      	ands	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a0a:	4a2f      	ldr	r2, [pc, #188]	; (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a10:	4b2d      	ldr	r3, [pc, #180]	; (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a34:	4a24      	ldr	r2, [pc, #144]	; (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a3a:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a5e:	4a1a      	ldr	r2, [pc, #104]	; (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a64:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a88:	4a0f      	ldr	r2, [pc, #60]	; (8001ac8 <HAL_GPIO_Init+0x304>)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3301      	adds	r3, #1
 8001a92:	61fb      	str	r3, [r7, #28]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	2b0f      	cmp	r3, #15
 8001a98:	f67f aea2 	bls.w	80017e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	bf00      	nop
 8001aa0:	3724      	adds	r7, #36	; 0x24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40013800 	.word	0x40013800
 8001ab4:	40020000 	.word	0x40020000
 8001ab8:	40020400 	.word	0x40020400
 8001abc:	40020800 	.word	0x40020800
 8001ac0:	40020c00 	.word	0x40020c00
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40013c00 	.word	0x40013c00

08001acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	807b      	strh	r3, [r7, #2]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001adc:	787b      	ldrb	r3, [r7, #1]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ae2:	887a      	ldrh	r2, [r7, #2]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ae8:	e003      	b.n	8001af2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aea:	887b      	ldrh	r3, [r7, #2]
 8001aec:	041a      	lsls	r2, r3, #16
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	619a      	str	r2, [r3, #24]
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e267      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d075      	beq.n	8001c0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b1e:	4b88      	ldr	r3, [pc, #544]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d00c      	beq.n	8001b44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b2a:	4b85      	ldr	r3, [pc, #532]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d112      	bne.n	8001b5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b36:	4b82      	ldr	r3, [pc, #520]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b42:	d10b      	bne.n	8001b5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b44:	4b7e      	ldr	r3, [pc, #504]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d05b      	beq.n	8001c08 <HAL_RCC_OscConfig+0x108>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d157      	bne.n	8001c08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e242      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b64:	d106      	bne.n	8001b74 <HAL_RCC_OscConfig+0x74>
 8001b66:	4b76      	ldr	r3, [pc, #472]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a75      	ldr	r2, [pc, #468]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	e01d      	b.n	8001bb0 <HAL_RCC_OscConfig+0xb0>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b7c:	d10c      	bne.n	8001b98 <HAL_RCC_OscConfig+0x98>
 8001b7e:	4b70      	ldr	r3, [pc, #448]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a6f      	ldr	r2, [pc, #444]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	4b6d      	ldr	r3, [pc, #436]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a6c      	ldr	r2, [pc, #432]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e00b      	b.n	8001bb0 <HAL_RCC_OscConfig+0xb0>
 8001b98:	4b69      	ldr	r3, [pc, #420]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a68      	ldr	r2, [pc, #416]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	4b66      	ldr	r3, [pc, #408]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a65      	ldr	r2, [pc, #404]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d013      	beq.n	8001be0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb8:	f7fe ffbc 	bl	8000b34 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc0:	f7fe ffb8 	bl	8000b34 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b64      	cmp	r3, #100	; 0x64
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e207      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd2:	4b5b      	ldr	r3, [pc, #364]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0xc0>
 8001bde:	e014      	b.n	8001c0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7fe ffa8 	bl	8000b34 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001be8:	f7fe ffa4 	bl	8000b34 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b64      	cmp	r3, #100	; 0x64
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e1f3      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfa:	4b51      	ldr	r3, [pc, #324]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0xe8>
 8001c06:	e000      	b.n	8001c0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d063      	beq.n	8001cde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c16:	4b4a      	ldr	r3, [pc, #296]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00b      	beq.n	8001c3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c22:	4b47      	ldr	r3, [pc, #284]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	d11c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c2e:	4b44      	ldr	r3, [pc, #272]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d116      	bne.n	8001c68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3a:	4b41      	ldr	r3, [pc, #260]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d005      	beq.n	8001c52 <HAL_RCC_OscConfig+0x152>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d001      	beq.n	8001c52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e1c7      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c52:	4b3b      	ldr	r3, [pc, #236]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4937      	ldr	r1, [pc, #220]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c66:	e03a      	b.n	8001cde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d020      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c70:	4b34      	ldr	r3, [pc, #208]	; (8001d44 <HAL_RCC_OscConfig+0x244>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c76:	f7fe ff5d 	bl	8000b34 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c7e:	f7fe ff59 	bl	8000b34 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e1a8      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c90:	4b2b      	ldr	r3, [pc, #172]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9c:	4b28      	ldr	r3, [pc, #160]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4925      	ldr	r1, [pc, #148]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	600b      	str	r3, [r1, #0]
 8001cb0:	e015      	b.n	8001cde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cb2:	4b24      	ldr	r3, [pc, #144]	; (8001d44 <HAL_RCC_OscConfig+0x244>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb8:	f7fe ff3c 	bl	8000b34 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cc0:	f7fe ff38 	bl	8000b34 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e187      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd2:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d036      	beq.n	8001d58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d016      	beq.n	8001d20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_RCC_OscConfig+0x248>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf8:	f7fe ff1c 	bl	8000b34 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d00:	f7fe ff18 	bl	8000b34 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e167      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d12:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <HAL_RCC_OscConfig+0x240>)
 8001d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0x200>
 8001d1e:	e01b      	b.n	8001d58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <HAL_RCC_OscConfig+0x248>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d26:	f7fe ff05 	bl	8000b34 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2c:	e00e      	b.n	8001d4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d2e:	f7fe ff01 	bl	8000b34 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d907      	bls.n	8001d4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e150      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
 8001d40:	40023800 	.word	0x40023800
 8001d44:	42470000 	.word	0x42470000
 8001d48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d4c:	4b88      	ldr	r3, [pc, #544]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1ea      	bne.n	8001d2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 8097 	beq.w	8001e94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d66:	2300      	movs	r3, #0
 8001d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d6a:	4b81      	ldr	r3, [pc, #516]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10f      	bne.n	8001d96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	4b7d      	ldr	r3, [pc, #500]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	4a7c      	ldr	r2, [pc, #496]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d84:	6413      	str	r3, [r2, #64]	; 0x40
 8001d86:	4b7a      	ldr	r3, [pc, #488]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d92:	2301      	movs	r3, #1
 8001d94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d96:	4b77      	ldr	r3, [pc, #476]	; (8001f74 <HAL_RCC_OscConfig+0x474>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d118      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001da2:	4b74      	ldr	r3, [pc, #464]	; (8001f74 <HAL_RCC_OscConfig+0x474>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a73      	ldr	r2, [pc, #460]	; (8001f74 <HAL_RCC_OscConfig+0x474>)
 8001da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dae:	f7fe fec1 	bl	8000b34 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db6:	f7fe febd 	bl	8000b34 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e10c      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc8:	4b6a      	ldr	r3, [pc, #424]	; (8001f74 <HAL_RCC_OscConfig+0x474>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0f0      	beq.n	8001db6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d106      	bne.n	8001dea <HAL_RCC_OscConfig+0x2ea>
 8001ddc:	4b64      	ldr	r3, [pc, #400]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de0:	4a63      	ldr	r2, [pc, #396]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6713      	str	r3, [r2, #112]	; 0x70
 8001de8:	e01c      	b.n	8001e24 <HAL_RCC_OscConfig+0x324>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b05      	cmp	r3, #5
 8001df0:	d10c      	bne.n	8001e0c <HAL_RCC_OscConfig+0x30c>
 8001df2:	4b5f      	ldr	r3, [pc, #380]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df6:	4a5e      	ldr	r2, [pc, #376]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001df8:	f043 0304 	orr.w	r3, r3, #4
 8001dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dfe:	4b5c      	ldr	r3, [pc, #368]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e02:	4a5b      	ldr	r2, [pc, #364]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6713      	str	r3, [r2, #112]	; 0x70
 8001e0a:	e00b      	b.n	8001e24 <HAL_RCC_OscConfig+0x324>
 8001e0c:	4b58      	ldr	r3, [pc, #352]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e10:	4a57      	ldr	r2, [pc, #348]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e12:	f023 0301 	bic.w	r3, r3, #1
 8001e16:	6713      	str	r3, [r2, #112]	; 0x70
 8001e18:	4b55      	ldr	r3, [pc, #340]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1c:	4a54      	ldr	r2, [pc, #336]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e1e:	f023 0304 	bic.w	r3, r3, #4
 8001e22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d015      	beq.n	8001e58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2c:	f7fe fe82 	bl	8000b34 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e32:	e00a      	b.n	8001e4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e34:	f7fe fe7e 	bl	8000b34 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e0cb      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4a:	4b49      	ldr	r3, [pc, #292]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0ee      	beq.n	8001e34 <HAL_RCC_OscConfig+0x334>
 8001e56:	e014      	b.n	8001e82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e58:	f7fe fe6c 	bl	8000b34 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e5e:	e00a      	b.n	8001e76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e60:	f7fe fe68 	bl	8000b34 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e0b5      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e76:	4b3e      	ldr	r3, [pc, #248]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1ee      	bne.n	8001e60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e82:	7dfb      	ldrb	r3, [r7, #23]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d105      	bne.n	8001e94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e88:	4b39      	ldr	r3, [pc, #228]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	4a38      	ldr	r2, [pc, #224]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 80a1 	beq.w	8001fe0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e9e:	4b34      	ldr	r3, [pc, #208]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d05c      	beq.n	8001f64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d141      	bne.n	8001f36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb2:	4b31      	ldr	r3, [pc, #196]	; (8001f78 <HAL_RCC_OscConfig+0x478>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7fe fe3c 	bl	8000b34 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec0:	f7fe fe38 	bl	8000b34 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e087      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed2:	4b27      	ldr	r3, [pc, #156]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69da      	ldr	r2, [r3, #28]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	019b      	lsls	r3, r3, #6
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef4:	085b      	lsrs	r3, r3, #1
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	041b      	lsls	r3, r3, #16
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f00:	061b      	lsls	r3, r3, #24
 8001f02:	491b      	ldr	r1, [pc, #108]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f08:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <HAL_RCC_OscConfig+0x478>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0e:	f7fe fe11 	bl	8000b34 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f16:	f7fe fe0d 	bl	8000b34 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e05c      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCC_OscConfig+0x416>
 8001f34:	e054      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f36:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <HAL_RCC_OscConfig+0x478>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7fe fdfa 	bl	8000b34 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f44:	f7fe fdf6 	bl	8000b34 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e045      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_RCC_OscConfig+0x470>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x444>
 8001f62:	e03d      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d107      	bne.n	8001f7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e038      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40007000 	.word	0x40007000
 8001f78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <HAL_RCC_OscConfig+0x4ec>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d028      	beq.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d121      	bne.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d11a      	bne.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fac:	4013      	ands	r3, r2
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d111      	bne.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc2:	085b      	lsrs	r3, r3, #1
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d107      	bne.n	8001fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d001      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40023800 	.word	0x40023800

08001ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0cc      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002004:	4b68      	ldr	r3, [pc, #416]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d90c      	bls.n	800202c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002012:	4b65      	ldr	r3, [pc, #404]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800201a:	4b63      	ldr	r3, [pc, #396]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0b8      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d020      	beq.n	800207a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002044:	4b59      	ldr	r3, [pc, #356]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	4a58      	ldr	r2, [pc, #352]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800204e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800205c:	4b53      	ldr	r3, [pc, #332]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	4a52      	ldr	r2, [pc, #328]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002066:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002068:	4b50      	ldr	r3, [pc, #320]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	494d      	ldr	r1, [pc, #308]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	4313      	orrs	r3, r2
 8002078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d044      	beq.n	8002110 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d107      	bne.n	800209e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	4b47      	ldr	r3, [pc, #284]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d119      	bne.n	80020ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e07f      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d003      	beq.n	80020ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d107      	bne.n	80020be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ae:	4b3f      	ldr	r3, [pc, #252]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d109      	bne.n	80020ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e06f      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020be:	4b3b      	ldr	r3, [pc, #236]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e067      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ce:	4b37      	ldr	r3, [pc, #220]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f023 0203 	bic.w	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	4934      	ldr	r1, [pc, #208]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020e0:	f7fe fd28 	bl	8000b34 <HAL_GetTick>
 80020e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e6:	e00a      	b.n	80020fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e8:	f7fe fd24 	bl	8000b34 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e04f      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fe:	4b2b      	ldr	r3, [pc, #172]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 020c 	and.w	r2, r3, #12
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	429a      	cmp	r2, r3
 800210e:	d1eb      	bne.n	80020e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002110:	4b25      	ldr	r3, [pc, #148]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d20c      	bcs.n	8002138 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211e:	4b22      	ldr	r3, [pc, #136]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002126:	4b20      	ldr	r3, [pc, #128]	; (80021a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d001      	beq.n	8002138 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e032      	b.n	800219e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d008      	beq.n	8002156 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002144:	4b19      	ldr	r3, [pc, #100]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	4916      	ldr	r1, [pc, #88]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	4313      	orrs	r3, r2
 8002154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d009      	beq.n	8002176 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002162:	4b12      	ldr	r3, [pc, #72]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	490e      	ldr	r1, [pc, #56]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	4313      	orrs	r3, r2
 8002174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002176:	f000 f821 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 800217a:	4602      	mov	r2, r0
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	490a      	ldr	r1, [pc, #40]	; (80021b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002188:	5ccb      	ldrb	r3, [r1, r3]
 800218a:	fa22 f303 	lsr.w	r3, r2, r3
 800218e:	4a09      	ldr	r2, [pc, #36]	; (80021b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002192:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe fc88 	bl	8000aac <HAL_InitTick>

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40023c00 	.word	0x40023c00
 80021ac:	40023800 	.word	0x40023800
 80021b0:	08002a24 	.word	0x08002a24
 80021b4:	20000000 	.word	0x20000000
 80021b8:	20000004 	.word	0x20000004

080021bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021c0:	b094      	sub	sp, #80	; 0x50
 80021c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	647b      	str	r3, [r7, #68]	; 0x44
 80021c8:	2300      	movs	r3, #0
 80021ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021cc:	2300      	movs	r3, #0
 80021ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021d4:	4b79      	ldr	r3, [pc, #484]	; (80023bc <HAL_RCC_GetSysClockFreq+0x200>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 030c 	and.w	r3, r3, #12
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d00d      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0x40>
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	f200 80e1 	bhi.w	80023a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d002      	beq.n	80021f0 <HAL_RCC_GetSysClockFreq+0x34>
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d003      	beq.n	80021f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80021ee:	e0db      	b.n	80023a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021f0:	4b73      	ldr	r3, [pc, #460]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80021f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80021f4:	e0db      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021f6:	4b73      	ldr	r3, [pc, #460]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80021f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021fa:	e0d8      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021fc:	4b6f      	ldr	r3, [pc, #444]	; (80023bc <HAL_RCC_GetSysClockFreq+0x200>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002204:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002206:	4b6d      	ldr	r3, [pc, #436]	; (80023bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d063      	beq.n	80022da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002212:	4b6a      	ldr	r3, [pc, #424]	; (80023bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	099b      	lsrs	r3, r3, #6
 8002218:	2200      	movs	r2, #0
 800221a:	63bb      	str	r3, [r7, #56]	; 0x38
 800221c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800221e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002224:	633b      	str	r3, [r7, #48]	; 0x30
 8002226:	2300      	movs	r3, #0
 8002228:	637b      	str	r3, [r7, #52]	; 0x34
 800222a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800222e:	4622      	mov	r2, r4
 8002230:	462b      	mov	r3, r5
 8002232:	f04f 0000 	mov.w	r0, #0
 8002236:	f04f 0100 	mov.w	r1, #0
 800223a:	0159      	lsls	r1, r3, #5
 800223c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002240:	0150      	lsls	r0, r2, #5
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4621      	mov	r1, r4
 8002248:	1a51      	subs	r1, r2, r1
 800224a:	6139      	str	r1, [r7, #16]
 800224c:	4629      	mov	r1, r5
 800224e:	eb63 0301 	sbc.w	r3, r3, r1
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002260:	4659      	mov	r1, fp
 8002262:	018b      	lsls	r3, r1, #6
 8002264:	4651      	mov	r1, sl
 8002266:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800226a:	4651      	mov	r1, sl
 800226c:	018a      	lsls	r2, r1, #6
 800226e:	4651      	mov	r1, sl
 8002270:	ebb2 0801 	subs.w	r8, r2, r1
 8002274:	4659      	mov	r1, fp
 8002276:	eb63 0901 	sbc.w	r9, r3, r1
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002286:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800228a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800228e:	4690      	mov	r8, r2
 8002290:	4699      	mov	r9, r3
 8002292:	4623      	mov	r3, r4
 8002294:	eb18 0303 	adds.w	r3, r8, r3
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	462b      	mov	r3, r5
 800229c:	eb49 0303 	adc.w	r3, r9, r3
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022ae:	4629      	mov	r1, r5
 80022b0:	024b      	lsls	r3, r1, #9
 80022b2:	4621      	mov	r1, r4
 80022b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022b8:	4621      	mov	r1, r4
 80022ba:	024a      	lsls	r2, r1, #9
 80022bc:	4610      	mov	r0, r2
 80022be:	4619      	mov	r1, r3
 80022c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022c2:	2200      	movs	r2, #0
 80022c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80022c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022cc:	f7fd ff84 	bl	80001d8 <__aeabi_uldivmod>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4613      	mov	r3, r2
 80022d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022d8:	e058      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022da:	4b38      	ldr	r3, [pc, #224]	; (80023bc <HAL_RCC_GetSysClockFreq+0x200>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	099b      	lsrs	r3, r3, #6
 80022e0:	2200      	movs	r2, #0
 80022e2:	4618      	mov	r0, r3
 80022e4:	4611      	mov	r1, r2
 80022e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022ea:	623b      	str	r3, [r7, #32]
 80022ec:	2300      	movs	r3, #0
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
 80022f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022f4:	4642      	mov	r2, r8
 80022f6:	464b      	mov	r3, r9
 80022f8:	f04f 0000 	mov.w	r0, #0
 80022fc:	f04f 0100 	mov.w	r1, #0
 8002300:	0159      	lsls	r1, r3, #5
 8002302:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002306:	0150      	lsls	r0, r2, #5
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4641      	mov	r1, r8
 800230e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002312:	4649      	mov	r1, r9
 8002314:	eb63 0b01 	sbc.w	fp, r3, r1
 8002318:	f04f 0200 	mov.w	r2, #0
 800231c:	f04f 0300 	mov.w	r3, #0
 8002320:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002324:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002328:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800232c:	ebb2 040a 	subs.w	r4, r2, sl
 8002330:	eb63 050b 	sbc.w	r5, r3, fp
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	00eb      	lsls	r3, r5, #3
 800233e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002342:	00e2      	lsls	r2, r4, #3
 8002344:	4614      	mov	r4, r2
 8002346:	461d      	mov	r5, r3
 8002348:	4643      	mov	r3, r8
 800234a:	18e3      	adds	r3, r4, r3
 800234c:	603b      	str	r3, [r7, #0]
 800234e:	464b      	mov	r3, r9
 8002350:	eb45 0303 	adc.w	r3, r5, r3
 8002354:	607b      	str	r3, [r7, #4]
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	f04f 0300 	mov.w	r3, #0
 800235e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002362:	4629      	mov	r1, r5
 8002364:	028b      	lsls	r3, r1, #10
 8002366:	4621      	mov	r1, r4
 8002368:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800236c:	4621      	mov	r1, r4
 800236e:	028a      	lsls	r2, r1, #10
 8002370:	4610      	mov	r0, r2
 8002372:	4619      	mov	r1, r3
 8002374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002376:	2200      	movs	r2, #0
 8002378:	61bb      	str	r3, [r7, #24]
 800237a:	61fa      	str	r2, [r7, #28]
 800237c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002380:	f7fd ff2a 	bl	80001d8 <__aeabi_uldivmod>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4613      	mov	r3, r2
 800238a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_RCC_GetSysClockFreq+0x200>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	0c1b      	lsrs	r3, r3, #16
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	3301      	adds	r3, #1
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800239c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800239e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023a6:	e002      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023a8:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80023aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3750      	adds	r7, #80	; 0x50
 80023b4:	46bd      	mov	sp, r7
 80023b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800
 80023c0:	00f42400 	.word	0x00f42400
 80023c4:	007a1200 	.word	0x007a1200

080023c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <HAL_RCC_GetHCLKFreq+0x14>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	20000000 	.word	0x20000000

080023e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023e4:	f7ff fff0 	bl	80023c8 <HAL_RCC_GetHCLKFreq>
 80023e8:	4602      	mov	r2, r0
 80023ea:	4b05      	ldr	r3, [pc, #20]	; (8002400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	0a9b      	lsrs	r3, r3, #10
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	4903      	ldr	r1, [pc, #12]	; (8002404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f6:	5ccb      	ldrb	r3, [r1, r3]
 80023f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40023800 	.word	0x40023800
 8002404:	08002a34 	.word	0x08002a34

08002408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800240c:	f7ff ffdc 	bl	80023c8 <HAL_RCC_GetHCLKFreq>
 8002410:	4602      	mov	r2, r0
 8002412:	4b05      	ldr	r3, [pc, #20]	; (8002428 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	0b5b      	lsrs	r3, r3, #13
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	4903      	ldr	r1, [pc, #12]	; (800242c <HAL_RCC_GetPCLK2Freq+0x24>)
 800241e:	5ccb      	ldrb	r3, [r1, r3]
 8002420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002424:	4618      	mov	r0, r3
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40023800 	.word	0x40023800
 800242c:	08002a34 	.word	0x08002a34

08002430 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e03f      	b.n	80024c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d106      	bne.n	800245c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7fe fa4e 	bl	80008f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2224      	movs	r2, #36	; 0x24
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002472:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 f829 	bl	80024cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002488:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695a      	ldr	r2, [r3, #20]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002498:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68da      	ldr	r2, [r3, #12]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2220      	movs	r2, #32
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2220      	movs	r2, #32
 80024bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024d0:	b0c0      	sub	sp, #256	; 0x100
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80024e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024e8:	68d9      	ldr	r1, [r3, #12]
 80024ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	ea40 0301 	orr.w	r3, r0, r1
 80024f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	431a      	orrs	r2, r3
 8002504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	431a      	orrs	r2, r3
 800250c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	4313      	orrs	r3, r2
 8002514:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002524:	f021 010c 	bic.w	r1, r1, #12
 8002528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002532:	430b      	orrs	r3, r1
 8002534:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002546:	6999      	ldr	r1, [r3, #24]
 8002548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	ea40 0301 	orr.w	r3, r0, r1
 8002552:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	4b8f      	ldr	r3, [pc, #572]	; (8002798 <UART_SetConfig+0x2cc>)
 800255c:	429a      	cmp	r2, r3
 800255e:	d005      	beq.n	800256c <UART_SetConfig+0xa0>
 8002560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	4b8d      	ldr	r3, [pc, #564]	; (800279c <UART_SetConfig+0x2d0>)
 8002568:	429a      	cmp	r2, r3
 800256a:	d104      	bne.n	8002576 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800256c:	f7ff ff4c 	bl	8002408 <HAL_RCC_GetPCLK2Freq>
 8002570:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002574:	e003      	b.n	800257e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002576:	f7ff ff33 	bl	80023e0 <HAL_RCC_GetPCLK1Freq>
 800257a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800257e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002588:	f040 810c 	bne.w	80027a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800258c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002590:	2200      	movs	r2, #0
 8002592:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002596:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800259a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800259e:	4622      	mov	r2, r4
 80025a0:	462b      	mov	r3, r5
 80025a2:	1891      	adds	r1, r2, r2
 80025a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80025a6:	415b      	adcs	r3, r3
 80025a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80025ae:	4621      	mov	r1, r4
 80025b0:	eb12 0801 	adds.w	r8, r2, r1
 80025b4:	4629      	mov	r1, r5
 80025b6:	eb43 0901 	adc.w	r9, r3, r1
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025ce:	4690      	mov	r8, r2
 80025d0:	4699      	mov	r9, r3
 80025d2:	4623      	mov	r3, r4
 80025d4:	eb18 0303 	adds.w	r3, r8, r3
 80025d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80025dc:	462b      	mov	r3, r5
 80025de:	eb49 0303 	adc.w	r3, r9, r3
 80025e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80025e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80025f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80025f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80025fa:	460b      	mov	r3, r1
 80025fc:	18db      	adds	r3, r3, r3
 80025fe:	653b      	str	r3, [r7, #80]	; 0x50
 8002600:	4613      	mov	r3, r2
 8002602:	eb42 0303 	adc.w	r3, r2, r3
 8002606:	657b      	str	r3, [r7, #84]	; 0x54
 8002608:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800260c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002610:	f7fd fde2 	bl	80001d8 <__aeabi_uldivmod>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4b61      	ldr	r3, [pc, #388]	; (80027a0 <UART_SetConfig+0x2d4>)
 800261a:	fba3 2302 	umull	r2, r3, r3, r2
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	011c      	lsls	r4, r3, #4
 8002622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002626:	2200      	movs	r2, #0
 8002628:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800262c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002630:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002634:	4642      	mov	r2, r8
 8002636:	464b      	mov	r3, r9
 8002638:	1891      	adds	r1, r2, r2
 800263a:	64b9      	str	r1, [r7, #72]	; 0x48
 800263c:	415b      	adcs	r3, r3
 800263e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002640:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002644:	4641      	mov	r1, r8
 8002646:	eb12 0a01 	adds.w	sl, r2, r1
 800264a:	4649      	mov	r1, r9
 800264c:	eb43 0b01 	adc.w	fp, r3, r1
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800265c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002660:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002664:	4692      	mov	sl, r2
 8002666:	469b      	mov	fp, r3
 8002668:	4643      	mov	r3, r8
 800266a:	eb1a 0303 	adds.w	r3, sl, r3
 800266e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002672:	464b      	mov	r3, r9
 8002674:	eb4b 0303 	adc.w	r3, fp, r3
 8002678:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800267c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002688:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800268c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002690:	460b      	mov	r3, r1
 8002692:	18db      	adds	r3, r3, r3
 8002694:	643b      	str	r3, [r7, #64]	; 0x40
 8002696:	4613      	mov	r3, r2
 8002698:	eb42 0303 	adc.w	r3, r2, r3
 800269c:	647b      	str	r3, [r7, #68]	; 0x44
 800269e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80026a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80026a6:	f7fd fd97 	bl	80001d8 <__aeabi_uldivmod>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4611      	mov	r1, r2
 80026b0:	4b3b      	ldr	r3, [pc, #236]	; (80027a0 <UART_SetConfig+0x2d4>)
 80026b2:	fba3 2301 	umull	r2, r3, r3, r1
 80026b6:	095b      	lsrs	r3, r3, #5
 80026b8:	2264      	movs	r2, #100	; 0x64
 80026ba:	fb02 f303 	mul.w	r3, r2, r3
 80026be:	1acb      	subs	r3, r1, r3
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80026c6:	4b36      	ldr	r3, [pc, #216]	; (80027a0 <UART_SetConfig+0x2d4>)
 80026c8:	fba3 2302 	umull	r2, r3, r3, r2
 80026cc:	095b      	lsrs	r3, r3, #5
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026d4:	441c      	add	r4, r3
 80026d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026da:	2200      	movs	r2, #0
 80026dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80026e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80026e8:	4642      	mov	r2, r8
 80026ea:	464b      	mov	r3, r9
 80026ec:	1891      	adds	r1, r2, r2
 80026ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80026f0:	415b      	adcs	r3, r3
 80026f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80026f8:	4641      	mov	r1, r8
 80026fa:	1851      	adds	r1, r2, r1
 80026fc:	6339      	str	r1, [r7, #48]	; 0x30
 80026fe:	4649      	mov	r1, r9
 8002700:	414b      	adcs	r3, r1
 8002702:	637b      	str	r3, [r7, #52]	; 0x34
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	f04f 0300 	mov.w	r3, #0
 800270c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002710:	4659      	mov	r1, fp
 8002712:	00cb      	lsls	r3, r1, #3
 8002714:	4651      	mov	r1, sl
 8002716:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800271a:	4651      	mov	r1, sl
 800271c:	00ca      	lsls	r2, r1, #3
 800271e:	4610      	mov	r0, r2
 8002720:	4619      	mov	r1, r3
 8002722:	4603      	mov	r3, r0
 8002724:	4642      	mov	r2, r8
 8002726:	189b      	adds	r3, r3, r2
 8002728:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800272c:	464b      	mov	r3, r9
 800272e:	460a      	mov	r2, r1
 8002730:	eb42 0303 	adc.w	r3, r2, r3
 8002734:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002744:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002748:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800274c:	460b      	mov	r3, r1
 800274e:	18db      	adds	r3, r3, r3
 8002750:	62bb      	str	r3, [r7, #40]	; 0x28
 8002752:	4613      	mov	r3, r2
 8002754:	eb42 0303 	adc.w	r3, r2, r3
 8002758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800275a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800275e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002762:	f7fd fd39 	bl	80001d8 <__aeabi_uldivmod>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4b0d      	ldr	r3, [pc, #52]	; (80027a0 <UART_SetConfig+0x2d4>)
 800276c:	fba3 1302 	umull	r1, r3, r3, r2
 8002770:	095b      	lsrs	r3, r3, #5
 8002772:	2164      	movs	r1, #100	; 0x64
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	3332      	adds	r3, #50	; 0x32
 800277e:	4a08      	ldr	r2, [pc, #32]	; (80027a0 <UART_SetConfig+0x2d4>)
 8002780:	fba2 2303 	umull	r2, r3, r2, r3
 8002784:	095b      	lsrs	r3, r3, #5
 8002786:	f003 0207 	and.w	r2, r3, #7
 800278a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4422      	add	r2, r4
 8002792:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002794:	e105      	b.n	80029a2 <UART_SetConfig+0x4d6>
 8002796:	bf00      	nop
 8002798:	40011000 	.word	0x40011000
 800279c:	40011400 	.word	0x40011400
 80027a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027a8:	2200      	movs	r2, #0
 80027aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80027ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80027b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80027b6:	4642      	mov	r2, r8
 80027b8:	464b      	mov	r3, r9
 80027ba:	1891      	adds	r1, r2, r2
 80027bc:	6239      	str	r1, [r7, #32]
 80027be:	415b      	adcs	r3, r3
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
 80027c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027c6:	4641      	mov	r1, r8
 80027c8:	1854      	adds	r4, r2, r1
 80027ca:	4649      	mov	r1, r9
 80027cc:	eb43 0501 	adc.w	r5, r3, r1
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	00eb      	lsls	r3, r5, #3
 80027da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027de:	00e2      	lsls	r2, r4, #3
 80027e0:	4614      	mov	r4, r2
 80027e2:	461d      	mov	r5, r3
 80027e4:	4643      	mov	r3, r8
 80027e6:	18e3      	adds	r3, r4, r3
 80027e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80027ec:	464b      	mov	r3, r9
 80027ee:	eb45 0303 	adc.w	r3, r5, r3
 80027f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80027f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002802:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002812:	4629      	mov	r1, r5
 8002814:	008b      	lsls	r3, r1, #2
 8002816:	4621      	mov	r1, r4
 8002818:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800281c:	4621      	mov	r1, r4
 800281e:	008a      	lsls	r2, r1, #2
 8002820:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002824:	f7fd fcd8 	bl	80001d8 <__aeabi_uldivmod>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4b60      	ldr	r3, [pc, #384]	; (80029b0 <UART_SetConfig+0x4e4>)
 800282e:	fba3 2302 	umull	r2, r3, r3, r2
 8002832:	095b      	lsrs	r3, r3, #5
 8002834:	011c      	lsls	r4, r3, #4
 8002836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800283a:	2200      	movs	r2, #0
 800283c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002840:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002844:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002848:	4642      	mov	r2, r8
 800284a:	464b      	mov	r3, r9
 800284c:	1891      	adds	r1, r2, r2
 800284e:	61b9      	str	r1, [r7, #24]
 8002850:	415b      	adcs	r3, r3
 8002852:	61fb      	str	r3, [r7, #28]
 8002854:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002858:	4641      	mov	r1, r8
 800285a:	1851      	adds	r1, r2, r1
 800285c:	6139      	str	r1, [r7, #16]
 800285e:	4649      	mov	r1, r9
 8002860:	414b      	adcs	r3, r1
 8002862:	617b      	str	r3, [r7, #20]
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002870:	4659      	mov	r1, fp
 8002872:	00cb      	lsls	r3, r1, #3
 8002874:	4651      	mov	r1, sl
 8002876:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800287a:	4651      	mov	r1, sl
 800287c:	00ca      	lsls	r2, r1, #3
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	4603      	mov	r3, r0
 8002884:	4642      	mov	r2, r8
 8002886:	189b      	adds	r3, r3, r2
 8002888:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800288c:	464b      	mov	r3, r9
 800288e:	460a      	mov	r2, r1
 8002890:	eb42 0303 	adc.w	r3, r2, r3
 8002894:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80028a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80028b0:	4649      	mov	r1, r9
 80028b2:	008b      	lsls	r3, r1, #2
 80028b4:	4641      	mov	r1, r8
 80028b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028ba:	4641      	mov	r1, r8
 80028bc:	008a      	lsls	r2, r1, #2
 80028be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80028c2:	f7fd fc89 	bl	80001d8 <__aeabi_uldivmod>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4b39      	ldr	r3, [pc, #228]	; (80029b0 <UART_SetConfig+0x4e4>)
 80028cc:	fba3 1302 	umull	r1, r3, r3, r2
 80028d0:	095b      	lsrs	r3, r3, #5
 80028d2:	2164      	movs	r1, #100	; 0x64
 80028d4:	fb01 f303 	mul.w	r3, r1, r3
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	3332      	adds	r3, #50	; 0x32
 80028de:	4a34      	ldr	r2, [pc, #208]	; (80029b0 <UART_SetConfig+0x4e4>)
 80028e0:	fba2 2303 	umull	r2, r3, r2, r3
 80028e4:	095b      	lsrs	r3, r3, #5
 80028e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028ea:	441c      	add	r4, r3
 80028ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028f0:	2200      	movs	r2, #0
 80028f2:	673b      	str	r3, [r7, #112]	; 0x70
 80028f4:	677a      	str	r2, [r7, #116]	; 0x74
 80028f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80028fa:	4642      	mov	r2, r8
 80028fc:	464b      	mov	r3, r9
 80028fe:	1891      	adds	r1, r2, r2
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	415b      	adcs	r3, r3
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800290a:	4641      	mov	r1, r8
 800290c:	1851      	adds	r1, r2, r1
 800290e:	6039      	str	r1, [r7, #0]
 8002910:	4649      	mov	r1, r9
 8002912:	414b      	adcs	r3, r1
 8002914:	607b      	str	r3, [r7, #4]
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	f04f 0300 	mov.w	r3, #0
 800291e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002922:	4659      	mov	r1, fp
 8002924:	00cb      	lsls	r3, r1, #3
 8002926:	4651      	mov	r1, sl
 8002928:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800292c:	4651      	mov	r1, sl
 800292e:	00ca      	lsls	r2, r1, #3
 8002930:	4610      	mov	r0, r2
 8002932:	4619      	mov	r1, r3
 8002934:	4603      	mov	r3, r0
 8002936:	4642      	mov	r2, r8
 8002938:	189b      	adds	r3, r3, r2
 800293a:	66bb      	str	r3, [r7, #104]	; 0x68
 800293c:	464b      	mov	r3, r9
 800293e:	460a      	mov	r2, r1
 8002940:	eb42 0303 	adc.w	r3, r2, r3
 8002944:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	663b      	str	r3, [r7, #96]	; 0x60
 8002950:	667a      	str	r2, [r7, #100]	; 0x64
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800295e:	4649      	mov	r1, r9
 8002960:	008b      	lsls	r3, r1, #2
 8002962:	4641      	mov	r1, r8
 8002964:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002968:	4641      	mov	r1, r8
 800296a:	008a      	lsls	r2, r1, #2
 800296c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002970:	f7fd fc32 	bl	80001d8 <__aeabi_uldivmod>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	4b0d      	ldr	r3, [pc, #52]	; (80029b0 <UART_SetConfig+0x4e4>)
 800297a:	fba3 1302 	umull	r1, r3, r3, r2
 800297e:	095b      	lsrs	r3, r3, #5
 8002980:	2164      	movs	r1, #100	; 0x64
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	3332      	adds	r3, #50	; 0x32
 800298c:	4a08      	ldr	r2, [pc, #32]	; (80029b0 <UART_SetConfig+0x4e4>)
 800298e:	fba2 2303 	umull	r2, r3, r2, r3
 8002992:	095b      	lsrs	r3, r3, #5
 8002994:	f003 020f 	and.w	r2, r3, #15
 8002998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4422      	add	r2, r4
 80029a0:	609a      	str	r2, [r3, #8]
}
 80029a2:	bf00      	nop
 80029a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80029a8:	46bd      	mov	sp, r7
 80029aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029ae:	bf00      	nop
 80029b0:	51eb851f 	.word	0x51eb851f

080029b4 <__libc_init_array>:
 80029b4:	b570      	push	{r4, r5, r6, lr}
 80029b6:	4d0d      	ldr	r5, [pc, #52]	; (80029ec <__libc_init_array+0x38>)
 80029b8:	4c0d      	ldr	r4, [pc, #52]	; (80029f0 <__libc_init_array+0x3c>)
 80029ba:	1b64      	subs	r4, r4, r5
 80029bc:	10a4      	asrs	r4, r4, #2
 80029be:	2600      	movs	r6, #0
 80029c0:	42a6      	cmp	r6, r4
 80029c2:	d109      	bne.n	80029d8 <__libc_init_array+0x24>
 80029c4:	4d0b      	ldr	r5, [pc, #44]	; (80029f4 <__libc_init_array+0x40>)
 80029c6:	4c0c      	ldr	r4, [pc, #48]	; (80029f8 <__libc_init_array+0x44>)
 80029c8:	f000 f820 	bl	8002a0c <_init>
 80029cc:	1b64      	subs	r4, r4, r5
 80029ce:	10a4      	asrs	r4, r4, #2
 80029d0:	2600      	movs	r6, #0
 80029d2:	42a6      	cmp	r6, r4
 80029d4:	d105      	bne.n	80029e2 <__libc_init_array+0x2e>
 80029d6:	bd70      	pop	{r4, r5, r6, pc}
 80029d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80029dc:	4798      	blx	r3
 80029de:	3601      	adds	r6, #1
 80029e0:	e7ee      	b.n	80029c0 <__libc_init_array+0xc>
 80029e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80029e6:	4798      	blx	r3
 80029e8:	3601      	adds	r6, #1
 80029ea:	e7f2      	b.n	80029d2 <__libc_init_array+0x1e>
 80029ec:	08002a44 	.word	0x08002a44
 80029f0:	08002a44 	.word	0x08002a44
 80029f4:	08002a44 	.word	0x08002a44
 80029f8:	08002a48 	.word	0x08002a48

080029fc <memset>:
 80029fc:	4402      	add	r2, r0
 80029fe:	4603      	mov	r3, r0
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d100      	bne.n	8002a06 <memset+0xa>
 8002a04:	4770      	bx	lr
 8002a06:	f803 1b01 	strb.w	r1, [r3], #1
 8002a0a:	e7f9      	b.n	8002a00 <memset+0x4>

08002a0c <_init>:
 8002a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a0e:	bf00      	nop
 8002a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a12:	bc08      	pop	{r3}
 8002a14:	469e      	mov	lr, r3
 8002a16:	4770      	bx	lr

08002a18 <_fini>:
 8002a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a1a:	bf00      	nop
 8002a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a1e:	bc08      	pop	{r3}
 8002a20:	469e      	mov	lr, r3
 8002a22:	4770      	bx	lr
